
>#We will use data from the United States 2004 National Corrections Reporting Program.
> p = read.csv("parole.csv")
> str(p)
'data.frame':	675 obs. of  9 variables:
 $ male             : int  1 0 1 1 1 1 1 0 0 1 ...
 $ race             : int  1 1 2 1 2 2 1 1 1 2 ...
 $ age              : num  33.2 39.7 29.5 22.4 21.6 46.7 31 24.6 32.6 29.1 ...
 $ state            : int  1 1 1 1 1 1 1 1 1 1 ...
 $ time.served      : num  5.5 5.4 5.6 5.7 5.4 6 6 4.8 4.5 4.7 ...
 $ max.sentence     : int  18 12 12 18 12 18 18 12 13 12 ...
 $ multiple.offenses: int  0 0 0 0 0 0 0 0 0 0 ...
 $ crime            : int  4 3 3 1 1 4 3 1 3 2 ...
 $ violator         : int  0 0 0 0 0 0 0 0 0 0 ...
>#Use factor function in state and crime.
>#That help us can use table to group variable.
> p$state = as.factor(p$state)
> p$crime = as.factor(p$crime)
> str(p)
'data.frame':	675 obs. of  9 variables:
 $ male             : int  1 0 1 1 1 1 1 0 0 1 ...
 $ race             : int  1 1 2 1 2 2 1 1 1 2 ...
 $ age              : num  33.2 39.7 29.5 22.4 21.6 46.7 31 24.6 32.6 29.1 ...
 $ state            : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ...
 $ time.served      : num  5.5 5.4 5.6 5.7 5.4 6 6 4.8 4.5 4.7 ...
 $ max.sentence     : int  18 12 12 18 12 18 18 12 13 12 ...
 $ multiple.offenses: int  0 0 0 0 0 0 0 0 0 0 ...
 $ crime            : Factor w/ 4 levels "1","2","3","4": 4 3 3 1 1 4 3 1 3 2 ...
 $ violator         : int  0 0 0 0 0 0 0 0 0 0 ...
> summary(p)
      male             race            age        state    time.served     max.sentence   multiple.offenses crime      violator     
 Min.   :0.0000   Min.   :1.000   Min.   :18.40   1:143   Min.   :0.000   Min.   : 1.00   Min.   :0.0000    1:315   Min.   :0.0000  
 1st Qu.:1.0000   1st Qu.:1.000   1st Qu.:25.35   2:120   1st Qu.:3.250   1st Qu.:12.00   1st Qu.:0.0000    2:106   1st Qu.:0.0000  
 Median :1.0000   Median :1.000   Median :33.70   3: 82   Median :4.400   Median :12.00   Median :1.0000    3:153   Median :0.0000  
 Mean   :0.8074   Mean   :1.424   Mean   :34.51   4:330   Mean   :4.198   Mean   :13.06   Mean   :0.5363    4:101   Mean   :0.1156  
 3rd Qu.:1.0000   3rd Qu.:2.000   3rd Qu.:42.55           3rd Qu.:5.200   3rd Qu.:15.00   3rd Qu.:1.0000            3rd Qu.:0.0000  
 Max.   :1.0000   Max.   :2.000   Max.   :67.00           Max.   :6.000   Max.   :18.00   Max.   :1.0000            Max.   :1.0000  
>#Before build model we must to split data prevent overfitting in model.
> set.seed(144)
> library(caTools)
> split = sample.split(p$violator,SplitRatio = 0.7)
> train = subset(p,split == TRUE)
> test = subset(p,split == FALSE)
> str(train)
'data.frame':	473 obs. of  9 variables:
 $ male             : int  1 1 1 1 1 0 0 1 1 1 ...
 $ race             : int  1 1 2 2 1 1 2 1 1 1 ...
 $ age              : num  33.2 22.4 21.6 46.7 31 32.6 28.4 20.5 30.1 37.8 ...
 $ state            : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ...
 $ time.served      : num  5.5 5.7 5.4 6 6 4.5 4.5 5.9 5.3 5.3 ...
 $ max.sentence     : int  18 18 12 18 18 13 12 12 16 8 ...
 $ multiple.offenses: int  0 0 0 0 0 0 1 0 0 0 ...
 $ crime            : Factor w/ 4 levels "1","2","3","4": 4 1 1 4 3 3 1 1 3 3 ...
 $ violator         : int  0 0 0 0 0 0 0 0 0 0 ...
> str(test)
'data.frame':	202 obs. of  9 variables:
 $ male             : int  0 1 0 1 1 1 1 1 1 1 ...
 $ race             : int  1 2 1 2 2 1 1 2 1 1 ...
 $ age              : num  39.7 29.5 24.6 29.1 24.5 32.8 36.7 36.5 33.5 37.3 ...
 $ state            : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ...
 $ time.served      : num  5.4 5.6 4.8 4.7 6 5.9 0.9 3.9 4.2 4.6 ...
 $ max.sentence     : int  12 12 12 12 16 16 16 12 12 12 ...
 $ multiple.offenses: int  0 0 0 0 0 0 0 1 1 1 ...
 $ crime            : Factor w/ 4 levels "1","2","3","4": 3 3 1 2 3 3 3 4 1 1 ...
 $ violator         : int  0 0 0 0 0 0 0 1 1 1 ...
#Now build model1 with all independence variable.
> mod1 = glm(violator~.,data = train,family = binomial)
> summary(mod1)

Call:
glm(formula = violator ~ ., family = binomial, data = train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.7041  -0.4236  -0.2719  -0.1690   2.8375  

Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
(Intercept)       -4.2411574  1.2938852  -3.278  0.00105 ** 
male               0.3869904  0.4379613   0.884  0.37690    
race               0.8867192  0.3950660   2.244  0.02480 *  
age               -0.0001756  0.0160852  -0.011  0.99129    
state2             0.4433007  0.4816619   0.920  0.35739    
state3             0.8349797  0.5562704   1.501  0.13335    
state4            -3.3967878  0.6115860  -5.554 2.79e-08 ***
time.served       -0.1238867  0.1204230  -1.029  0.30359    
max.sentence       0.0802954  0.0553747   1.450  0.14705    
multiple.offenses  1.6119919  0.3853050   4.184 2.87e-05 ***
crime2             0.6837143  0.5003550   1.366  0.17180    
crime3            -0.2781054  0.4328356  -0.643  0.52054    
crime4            -0.0117627  0.5713035  -0.021  0.98357    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 340.04  on 472  degrees of freedom
Residual deviance: 251.48  on 460  degrees of freedom
AIC: 277.48

Number of Fisher Scoring iterations: 6
>#Find odds and probability this individual is violator?
>#From coefficients we can see below.
>#Consider a parolee who is male, of white race, aged 50 years at prison release,
>#From the state of Maryland, served 3 months, had a maximum sentence of 12 months,
>#Did not commit multiple offenses, and committed a larceny.
> a = -4.2411574+0.3869904*(1)+0.8867192*(1)-0.0001756*(50)+0.4433007*(0)+0.8349797*(0)-3.3967878*(0)-0.1238867*(3)+0.0802954*(12)+1.6119919*(0)+0.6837143*(1)-0.2781054*(0)-0.0117627*(0)
> a
[1] -1.700629
> # ODDS = exp(a)
[1] 0.1825687
> # Or ODDS = py1/py0
> py1 = 1/(1+exp(-a))
> py0 = 1-py1
> odd = py1/py0
> odd
[1] 0.1825687
> # probability this individual is
> py1
[1] 0.1543832
> # Now use model 1 to predict function with test set.

> pred = predict(mod1,newdata = test,type = "response")
> # Using threshold >= 0.5
> table(test$violator,pred >= 0.5)
   
    FALSE TRUE
  0   167   12
  1    11   12
> # What is the model's sensitivity?
> 12/(12+11)
[1] 0.5217391
> # What is the model's specificity?
> 167/(167+12)
[1] 0.9329609
> # What is the model's accuracy?
> (167+12)/(167+12+11+12)
[1] 0.8861386
> # What is the accuracy of a simple model that predicts that every parolee is a non-violator?
> table(test$violator)

  0   1 
179  23 

> 179/(179+23)
[1] 0.8861386

> # Using the ROCR package, what is the AUC value for the model?   
> library(ROCR)
> ROCRpred = prediction(pred,test$violator)
> ROCRperf = performance(ROCRpred,"tpr","fpr")
> plot(ROCRperf,colorize = TRUE,print.cutoffs.at =seq(0,1,0.1),text.adj=c(-0.2,1.7))
> as.numeric(performance(ROCRpred, "auc")@y.values)
[1] 0.8945834
> 